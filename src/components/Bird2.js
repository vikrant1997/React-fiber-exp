/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from "three";
import React, { useRef, useState, useEffect } from "react";
import { useLoader, useFrame } from "react-three-fiber";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";
import { draco } from "drei";
import url from "../assets/flamingo.glb";

export default function Bird2(props) {
  const group = useRef();
  const mesh = useRef();
  const { nodes, materials, animations } = useLoader(
    GLTFLoader,
    url,
    draco("/draco-gltf/")
  );

  const actions = useRef();
  const [mixer] = useState(() => new THREE.AnimationMixer());

  useEffect(() => {
    mesh.current.scale.set(10, 10, 10);

    void mixer.clipAction(animations[0], mesh.current).play();
    actions.current = {
      KeyAction: mixer.clipAction(animations[0], mesh.current),
    };
    actions.current.KeyAction.play();
    return () => animations.forEach((clip) => mixer.uncacheClip(clip));
  }, []);

  useFrame((state, delta) => {
    // group.current.rotation.y += 0.01;
    // Math.sin((delta * factor) / 2) * Math.cos((delta * factor) / 2) * 1.5;
    mixer.update(delta);
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        ref={mesh}
        castShadow={true}
        material={materials.Material_0_COLOR_0}
        geometry={nodes.Object_0.geometry}
        morphTargetDictionary={nodes.Object_0.morphTargetDictionary}
        morphTargetInfluences={nodes.Object_0.morphTargetInfluences}
        rotation={[Math.PI / 2, 0, 0]}
      ></mesh>
    </group>
  );
}
